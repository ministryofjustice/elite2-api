/:
  get:
    (javaOperationName): getOffenderBookings
    description: Summary information for all offenders accessible to current user.
    queryParameters:
      bookingId?:
        type: array
        (javaType): List<Long>
        description: The booking ids of offender
        example: bookingId=342342&bookingId=564545
      offenderNo?:
        type: array
        (javaType): List<String>
        description: The required offender numbers
        example: offenderNo=A1234AA&offenderNo=A1234AB
      iepLevel?:
        type: boolean
        description: return IEP level data
        example: iepLevel=true
        default: false
    responses:
      200:
        body:
          application/json:
            type: OffenderBooking[]
            description: Summary information for all offenders accessible to current user.
      500:
        body:
          application/json:
            type: ErrorResponse
            description: Unrecoverable error occurred whilst processing request.
            example: !include ../examples/ouput/500.sample.json
    is: [
      pageable, hasResponsePagination,
      searchable: {fieldsList : "bookingNo, bookingId, offenderNo, firstName, lastName, agencyId, assignedLivingUnitId, assignedOfficerUserId"},
      sortable: {fieldsList : "bookingNo, bookingId, offenderNo, firstName, lastName, agencyId, assignedLivingUnitId"}
    ]
  post:
    (beta): true
    (javaOperationName): createOffenderBooking
    description: Create booking for offender (additionally creating offender record if one does not already exist).
    body:
      application/json:
        type: NewBooking
        description: Details required to enable creation of new offender booking (and offender, if necessary).
    responses:
      201:
        body:
          application/json:
            type: OffenderSummary
            description: Offender booking created.
      400:
        body:
          application/json:
            type: ErrorResponse
            description: Request to create offender booking failed. Consult response for reason.
            example: !include ../examples/ouput/400.sample.json
     403:
        body:
          application/json:
            type: ErrorResponse
            description: User not authorised to create offender booking.
            example: !include ../examples/ouput/403.sample.json
      500:
        body:
          application/json:
            type: ErrorResponse
            description: Unrecoverable error occurred whilst processing request.
            example: !include ../examples/ouput/500.sample.json
  put:
    (beta): true
    (javaOperationName): recallOffenderBooking
    description: Process recall for offender.
    body:
      application/json:
        type: RecallBooking
        description: Details required to enable recall of offender.
    responses:
      200:
        body:
          application/json:
            type: OffenderSummary
            description: Offender successfully recalled.
      400:
        body:
          application/json:
            type: ErrorResponse
            description: Request to recall offender failed. Consult response for reason.
            example: !include ../examples/ouput/400.sample.json
     403:
        body:
          application/json:
            type: ErrorResponse
            description: User not authorised to recall offender.
            example: !include ../examples/ouput/403.sample.json
      500:
        body:
          application/json:
            type: ErrorResponse
            description: Unrecoverable error occurred whilst processing request.
            example: !include ../examples/ouput/500.sample.json

/{bookingId}:
  (javaOperationName): getOffenderBooking
  type: { readOnlyItem: { type: InmateDetail, description: Offender detail. } }
  uriParameters:
    bookingId:
      (javaType): Long
      description: The booking id of offender
  get:
    queryParameters:
      basicInfo?:
        type: boolean
        description: If set to true then only basic data is returned
        example: true
        default: false

/offenderNo/{offenderNo}:
  (javaOperationName): getOffenderBookingByOffenderNo
  type: { readOnlyItem: { type: InmateDetail, description: Offender detail. } }
  uriParameters:
    offenderNo:
      type: string
      description: The offenderNo of offender
  get:
    queryParameters:
      fullInfo?:
        type: boolean
        description: If set to true then full data is returned
        example: true
        default: false

/{bookingId}/caseNotes:
  description: Offender Case Notes
  uriParameters:
    bookingId:
      (javaType): Long
      description: The booking id of offender
  get:
    (javaOperationName): getOffenderCaseNotes
    description: Offender case notes.
    queryParameters:
      from:
        description: start contact date to search from
        type: string
      to:
        description: end contact date to search up to (including this date)
        type: string
    responses:
      200:
        body:
          application/json:
            CaseNote[]
    is: [
      pageable, hasResponsePagination,
      searchable: {fieldsList : "creationDateTime, type, subType, source"},
      sortable: {fieldsList : "creationDateTime, type, subType, source"},
    ]

  post:
    (javaOperationName): createBookingCaseNote
    description: Create case note for offender.
    body:
      application/json:
        type: NewCaseNote
    responses:
      201:
        body:
          application/json:
            type: CaseNote
            description: The Case Note has been recorded. The updated object is returned including the status.
      409:
        body:
          application/json:
            type: ErrorResponse
            description: The case note has already been recorded under the booking. The current unmodified object (including status) is returned.

/offenderNo/{offenderNo}/caseNotes:
  description: Offender Case Notes by offenderNo
  uriParameters:
    offenderNo:
      type: string
      description: The offenderNo of offender
  post:
    (javaOperationName): createOffenderCaseNote
    description: Create case note for offender.
    body:
      application/json:
        type: NewCaseNote
    responses:
      201:
        body:
          application/json:
            type: CaseNote
            description: The Case Note has been recorded. The updated object is returned including the status.
      409:
        body:
          application/json:
            type: ErrorResponse
            description: The case note has already been recorded under the booking. The current unmodified object (including status) is returned.

/{bookingId}/caseNotes/{caseNoteId}:
  uriParameters:
    bookingId:
      (javaType): Long
      description: The booking id of offender
    caseNoteId:
      (javaType): Long
      description: The case note id
  get:
    (javaOperationName): getOffenderCaseNote
    description: Offender case note detail.
    responses:
      200:
        body:
          application/json:
            CaseNote
  put:
    (javaOperationName): updateOffenderCaseNote
    description: Amend offender case note.
    body:
      application/json:
        type: UpdateCaseNote
    responses:
      201:
        body:
          application/json:
            type: CaseNote
            description: Case Note amendment processed successfully. Updated case note is returned.
      400:
        body:
          application/json:
            type: ErrorResponse
            description: Invalid request - e.g. amendment text not provided.
            example: !include ../examples/ouput/400.sample.json
      403:
        body:
          application/json:
            type: ErrorResponse
            description: Forbidden - user not authorised to amend case note.
            example: !include ../examples/ouput/403.sample.json
      404:
        body:
          application/json:
            type: ErrorResponse
            description: Resource not found - booking or case note does not exist or is not accessible to user.
            example: !include ../examples/ouput/404.sample.json
      500:
        body:
          application/json:
            type: ErrorResponse
            description: Internal server error.
            example: !include ../examples/ouput/500.sample.json

/{bookingId}/alerts:
  (javaOperationName): getOffenderAlerts
  type: { readOnlyCollectionPaged: { type: Alert, description: Offender alerts. } }
  uriParameters:
    bookingId:
      (javaType): Long
      description: The booking id of offender
  is: [
    sortable: {fieldsList: "alertType, alertCode, dateCreated, dateExpires"},
    searchable: {fieldsList: "alertType, alertCode, dateCreated, dateExpires"},
  ]

/{bookingId}/alerts/{alertId}:
  (javaOperationName): getOffenderAlert
  type: { readOnlyItem: { type: Alert, description: Offender alert detail. } }
  uriParameters:
    bookingId:
      (javaType): Long
      description: The booking id of offender
    alertId:
      (javaType): Long
      description: The Alert Id

# TODO: should move this to the prisonstaffhub api when it becomes available
/offenderNo/{agencyId}/alerts:
  post:
    (javaOperationName): getAlertsByOffenderNos
    uriParameters:
      agencyId:
        type: string
        description: The prison.
    body:
      application/json:
        (javaType): List<String>
        description: The required offender numbers (mandatory)
    responses:
      200:
        body:
          application/json:
            type: Alert[]

/{bookingId}/assessment/{assessmentCode}:
  (javaOperationName): getAssessmentByCode
  type: { readOnlyItem: { type: Assessment, description: Offender assessment detail. } }
  uriParameters:
    bookingId:
      (javaType): Long
      description: The booking id of offender
    assessmentCode:
      type: string
      description: Assessment Type Code

/{bookingId}/assessments:
  (javaOperationName): getAssessments
  type: { readOnlyCollection: { type: Assessment, description: Assessment Information } }
  uriParameters:
    bookingId:
      (javaType): Long
      description: The offender booking id

/{bookingId}/physicalMarks:
  (javaOperationName): getPhysicalMarks
  type: { readOnlyCollection: { type: PhysicalMark, description: Physical Mark Information } }
  uriParameters:
    bookingId:
      (javaType): Long
      description: The offender booking id

/{bookingId}/profileInformation:
  (javaOperationName): getProfileInformation
  type: { readOnlyCollection: { type: ProfileInformation, description: Profile Information } }
  uriParameters:
    bookingId:
      (javaType): Long
      description: The offender booking id

/{bookingId}/physicalCharacteristics:
  (javaOperationName): getPhysicalCharacteristics
  type: { readOnlyCollection: { type: PhysicalCharacteristic, description: Physical Characteristics } }
  uriParameters:
    bookingId:
      (javaType): Long
      description: The offender booking id

/{bookingId}/physicalAttributes:
  (javaOperationName): getPhysicalAttributes
  type: { readOnlyItem: { type: PhysicalAttributes, description: Offender Physical Attributes. } }
  uriParameters:
    bookingId:
      (javaType): Long
      description: The offender booking id

/{bookingId}/identifiers:
  (javaOperationName): getOffenderIdentifiers
  type: { readOnlyCollection: { type: OffenderIdentifier, description: Identifiers for this booking } }
  uriParameters:
    bookingId:
      (javaType): Long
      description: The offender booking id

/{bookingId}/image:
  (javaOperationName): getMainImageForBookings
  type: {
    readOnlyItem: {
      type: ImageDetail,
      description: Image detail (without image data).
    }
  }
  uriParameters:
    bookingId:
      (javaType): Long
      description: The booking id of offender

/{bookingId}/image/data:
  (javaOperationName): getMainBookingImageData
  type: {
    userPicture: {
      description: Image data (as bytes).
    }
  }
  uriParameters:
    bookingId:
      (javaType): Long
      description: The booking id of offender

/offenderNo/{offenderNo}/image/data:
  (javaOperationName): getMainBookingImageDataByNo
  type: {
    userPicture: {
      description: Image data (as bytes).
    }
  }
  uriParameters:
    offenderNo:
      type: string
      description: The offender No of offender

/{bookingId}/aliases:
  (javaOperationName): getOffenderAliases
  type: { readOnlyCollectionPaged: { type: Alias, description: Offender aliases. } }
  uriParameters:
    bookingId:
      (javaType): Long
      description: The booking id of offender
  is: [
    sortable: {fieldsList: "firstName, lastName, age, dob, middleName, nameType, createDate"}
  ]

/{bookingId}/sentenceDetail:
  (javaOperationName): getBookingSentenceDetail
  type: {
    readOnlyItem: {
      type: SentenceDetail,
      description: Offender sentence detail (key dates and additional days awarded).
    }
  }
  uriParameters:
    bookingId:
      (javaType): Long
      description: The booking id of offender

/{bookingId}/iepSummary:
  (javaOperationName): getBookingIEPSummary
  type: {
    readOnlyItem: {
      type: PrivilegeSummary,
      description: Offender IEP (Incentives & Earned Privileges) summary.
    }
  }
  uriParameters:
    bookingId:
      (javaType): Long
      description: The booking id of offender
  get:
    queryParameters:
      withDetails:
        description: Toggle to return IEP detail entries in response (or not).
        type: boolean

/{bookingId}/balances:
  (javaOperationName): getBalances
  type: { readOnlyItem: { type: Account, description: Offender account balances. } }
  uriParameters:
    bookingId:
      (javaType): Long
      description: The offender booking id

/{bookingId}/events/today:
  (javaOperationName): getEventsToday
  type: { readOnlyCollection: { type: ScheduledEvent, description: Today's scheduled events for offender. } }
  uriParameters:
    bookingId:
      (javaType): Long
      description: The offender booking id

/{bookingId}/events/thisWeek:
  (javaOperationName): getEventsThisWeek
  type: { readOnlyCollection: { type: ScheduledEvent, description: Scheduled events for offender for coming week (from current day). } }
  uriParameters:
    bookingId:
      (javaType): Long
      description: The offender booking id

/{bookingId}/events/nextWeek:
  (javaOperationName): getEventsNextWeek
  type: { readOnlyCollection: { type: ScheduledEvent, description: Scheduled events for offender for following week. } }
  uriParameters:
    bookingId:
      (javaType): Long
      description: The offender booking id

/{bookingId}/activities:
  (javaOperationName): getBookingActivities
  type: { readOnlyCollectionPaged: { type: ScheduledEvent, description: All scheduled activities for offender. } }
  uriParameters:
    bookingId:
      (javaType): Long
      description: The offender booking id
  get:
    queryParameters:
      fromDate?:
        type: string
        description: Returned activities must be scheduled on or after this date (in YYYY-MM-DD format).
        example: 2017-06-01
      toDate?:
        type: string
        description: Returned activities must be scheduled on or before this date (in YYYY-MM-DD format).
        example: 2017-09-01
  is: [
    sortable: {fieldsList: "eventDate, startTime, endTime, eventLocation"}
  ]

/{bookingId}/activities/today:
  (javaOperationName): getBookingActivitiesForToday
  type: { readOnlyCollection: { type: ScheduledEvent, description: Today's scheduled activities for offender. } }
  uriParameters:
    bookingId:
      (javaType): Long
      description: The offender booking id
  is: [
    sortable: {fieldsList: "eventDate, startTime, endTime, eventLocation"}
  ]

/offenderNo/{offenderNo}/activities/{activityId}/attendance:
  uriParameters:
    offenderNo:
      type: string
      description: The offenderNo of the prisoner
    activityId:
      (javaType): Long
      description: The activity id
  put:
    (javaOperationName): updateAttendance
    description: Update offender attendance and pay.
    body:
      application/json:
        type: UpdateAttendance
    responses:
      201:
        mediaType:
      400:
        body:
          application/json:
            type: ErrorResponse
            description: Invalid request - e.g. validation error.
            example: !include ../examples/ouput/400.sample.json
      403:
        body:
          application/json:
            type: ErrorResponse
            description: Forbidden - user not authorised to attend activity.
            example: !include ../examples/ouput/403.sample.json
      404:
        body:
          application/json:
            type: ErrorResponse
            description: Resource not found - booking or event does not exist or is not accessible to user.
            example: !include ../examples/ouput/404.sample.json
      500:
        body:
          application/json:
            type: ErrorResponse
            description: Internal server error.
            example: !include ../examples/ouput/500.sample.json

/{bookingId}/contacts:
  (javaOperationName): getContacts
  type: { readOnlyItem: { type: ContactDetail, description: Offender contacts (e.g. next of kin). } }
  uriParameters:
    bookingId:
      (javaType): Long
      description: The offender booking id

/{bookingId}/relationships:
  type: { readOnlyCollection: { type: Contact, description: The contact details and their relationship to the offender } }
  uriParameters:
    bookingId:
      (javaType): Long
      type: number
      description: The offender booking id
  get:
    (javaOperationName): getRelationships
    queryParameters:
      relationshipType?:
        type: string
        description: filter by the relationship type
  post:
    (javaOperationName): createRelationship
    description: Create a relationship with an offender
    body:
      application/json:
        type: OffenderRelationship
        description: The person details and their relationship to the offender
    responses:
      201:
        description: If successful the Contact object is returned.
        body:
          application/json:
            type: Contact

/offenderNo/{offenderNo}/relationships:
  type: { readOnlyCollection: { type: Contact, description: The contact details and their relationship to the offender } }
  uriParameters:
    offenderNo:
      type: string
      description: The offender Offender No
  get:
    (javaOperationName): getRelationshipsByOffenderNo
    queryParameters:
      relationshipType?:
        type: string
        description: filter by the relationship type
  post:
    (javaOperationName): createRelationshipByOffenderNo
    description: Create a relationship with an offender
    body:
      application/json:
        type: OffenderRelationship
        description: The person details and their relationship to the offender
    responses:
      201:
        description: If successful the Contact object is returned.
        body:
          application/json:
            type: Contact

/offenderNo/{offenderNo}/key-worker:
  (javaOperationName): getKeyworkerByOffenderNo
  type: {readOnlyItem: {type: Keyworker, description: Key worker details. }}
  uriParameters:
    offenderNo:
      type: string
      description: The offenderNo of offender

/{bookingId}/adjudications:
  (javaOperationName): getAdjudications
  type: { readOnlyItem: { type: AdjudicationDetail, description: Offender adjudications (awards and sanctions). } }
  uriParameters:
    bookingId:
      (javaType): Long
      description: The offender booking id
  get:
    queryParameters:
      awardCutoffDate?:
        type: string
        description: Only awards ending on or after this date (in YYYY-MM-DD format) will be considered.
        example: 2017-06-17
      adjudicationCutoffDate?:
        type: string
        description: Only proved adjudications ending on or after this date (in YYYY-MM-DD format) will be counted.
        example: 2017-09-22

/{bookingId}/caseNotes/{type}/{subType}/count:
  (javaOperationName): getCaseNoteCount
  type: { readOnlyItem: { type: CaseNoteCount, description: Count of case notes, of specified type and sub-type, for offender. } }
  uriParameters:
    bookingId:
      type: number
      (javaType): Long
      description: The offender booking id
    type:
      type: string
      description: Case note type.
    subType:
      type: string
      description: Case note sub-type.
  get:
    queryParameters:
      fromDate?:
        type: string
        description: Only case notes occurring on or after this date (in YYYY-MM-DD format) will be considered.
        example: 2017-06-01
      toDate?:
        type: string
        description: Only case notes occurring on or before this date (in YYYY-MM-DD format) will be considered.
        example: 2017-09-01

/{bookingId}/mainOffence:
  (javaOperationName): getMainOffence
  type: { readOnlyCollection: { type: OffenceDetail, description: Offender main offence detail. } }
  uriParameters:
    bookingId:
      (javaType): Long
      description: The offender booking id

/{bookingId}/visits:
  (javaOperationName): getBookingVisits
  type: { readOnlyCollectionPaged: { type: ScheduledEvent, description: All scheduled visits for offender. } }
  uriParameters:
    bookingId:
      (javaType): Long
      description: The offender booking id
  get:
    queryParameters:
      fromDate?:
        type: string
        description: Returned visits must be scheduled on or after this date (in YYYY-MM-DD format).
        example: 2017-06-01
      toDate?:
        type: string
        description: Returned visits must be scheduled on or before this date (in YYYY-MM-DD format).
        example: 2017-09-01
  is: [
    sortable: {fieldsList: "eventDate, startTime, endTime, eventLocation"}
  ]

/{bookingId}/visits/today:
  (javaOperationName): getBookingVisitsForToday
  type: { readOnlyCollection: { type: ScheduledEvent, description: Today's scheduled visits for offender. } }
  uriParameters:
    bookingId:
      (javaType): Long
      description: The offender booking id
  is: [
    sortable: {fieldsList: "eventDate, startTime, endTime, eventLocation"}
  ]

/{bookingId}/visits/last:
  (javaOperationName): getBookingVisitsLast
  type: {readOnlyItem: {type: Visit, description: The most recent visit for the offender. }}
  uriParameters:
    bookingId:
      (javaType): Long
      description: The offender booking id

/{bookingId}/visits/next:
  (javaOperationName): getBookingVisitsNext
  type: {readOnlyItem: {type: Visit, description: The next visit for the offender. }}
  uriParameters:
    bookingId:
      (javaType): Long
      description: The offender booking id

/{bookingId}/appointments:
  uriParameters:
    bookingId:
      (javaType): Long
      description: The offender booking id
  get:
    description: All scheduled appointments for offender.
    queryParameters:
      fromDate?:
        type: string
        description: Returned appointments must be scheduled on or after this date (in YYYY-MM-DD format).
        example: 2017-06-01
      toDate?:
        type: string
        description: Returned appointments must be scheduled on or before this date (in YYYY-MM-DD format).
        example: 2017-09-01
    responses:
      200:
        body:
          application/json:
            ScheduledEvent[]
    is: [
      pageable,
      hasResponsePagination,
      sortable: {fieldsList: "eventDate, startTime, endTime, eventLocation"}
    ]
  post:
    description: Create appointment for offender.
    body:
      application/json:
        type: NewAppointment
    responses:
      201:
        body:
          application/json:
            type: ScheduledEvent
            description: The appointment has been recorded. The updated object is returned including the status.

/{bookingId}/appointments/today:
  (javaOperationName): getBookingAppointmentsForToday
  type: { readOnlyCollection: { type: ScheduledEvent, description: Today's scheduled appointments for offender. } }
  uriParameters:
    bookingId:
      (javaType): Long
      description: The offender booking id
  is: [
    sortable: {fieldsList: "eventDate, startTime, endTime, eventLocation"}
  ]

/{bookingId}/appointments/thisWeek:
  (javaOperationName): getBookingAppointmentsForThisWeek
  type: { readOnlyCollection: { type: ScheduledEvent, description: Scheduled appointments for offender for coming week (from current day). } }
  uriParameters:
    bookingId:
      (javaType): Long
      description: The offender booking id
  is: [
    sortable: {fieldsList: "eventDate, startTime, endTime, eventLocation"}
  ]

/{bookingId}/appointments/nextWeek:
  (javaOperationName): getBookingAppointmentsForNextWeek
  type: { readOnlyCollection: { type: ScheduledEvent, description: Scheduled appointments for offender for following week. } }
  uriParameters:
    bookingId:
      (javaType): Long
      description: The offender booking id
  is: [
    sortable: {fieldsList: "eventDate, startTime, endTime, eventLocation"}
  ]
