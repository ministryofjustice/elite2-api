project(":elite2-api-impl") {

    apply plugin: "org.springframework.boot"
    apply plugin: 'net.serenity-bdd.aggregator'
    apply plugin: "jacoco"

    dependencies {
        compile project(":elite2-api")
        compile project(path: ":elite2-api", configuration: "generatedOutput")

        compile files("${rootDir}/elite2-api-impl/src/main/configs")
        compile files("${rootDir}/elite2-api-impl/src/main/resources")
        compile files("${rootDir}/lib/ojdbc7-12.1.0.2.jar")

        compile("org.springframework.boot:spring-boot-starter-web")
        compile("org.springframework.boot:spring-boot-starter-aop")
        compile('org.springframework.boot:spring-boot-starter-actuator')
        compile("org.springframework.boot:spring-boot-starter-jersey")
        compile("org.springframework.boot:spring-boot-starter-jdbc")
        compile("org.springframework.boot:spring-boot-starter-security")
        compile("org.springframework.boot:spring-boot-starter-cache")
        compile("org.springframework.boot:spring-boot-devtools")
        compile("org.springframework.mobile:spring-mobile-device")

        compile("org.springframework.security.oauth:spring-security-oauth2:2.2.1.RELEASE")
        compile("org.springframework.security:spring-security-jwt:1.0.9.RELEASE")

        compile group: 'commons-codec', name: 'commons-codec', version: '1.11'
        compile("org.apache.commons:commons-text:1.4")
        compile("com.fasterxml.jackson.datatype:jackson-datatype-jsr310:2.9.2")
        compile("com.github.jsqlparser:jsqlparser:1.1")
        compile("net.sf.ehcache:ehcache:2.10.4")
        compile("io.jsonwebtoken:jjwt:${version_jjwt}")
        compile("com.zaxxer:HikariCP:${version_hikaricp}")

        compile("io.swagger:swagger-jersey2-jaxrs:1.5.18")
        compile("io.springfox:springfox-swagger-ui:2.9.2")
        compile("io.springfox:springfox-swagger2:2.9.2")
        compile("net.logstash.logback:logstash-logback-encoder:4.11")
        compile("com.microsoft.azure:applicationinsights-core:${version_applicationinsights}")
        compile("com.microsoft.azure:applicationinsights-web:${version_applicationinsights}")
        compile("com.microsoft.azure:applicationinsights-logging-logback:${version_applicationinsights}")

        compileOnly 'org.projectlombok:lombok:1.16.18'

        runtime("org.postgresql:postgresql:42.1.4")
        runtime('org.hsqldb:hsqldb:2.4.0')
        runtime("org.flywaydb:flyway-core:5.0.2")

        testCompile project(":elite2-api")
        testCompile project(path: ":elite2-api", configuration: "generatedOutput")

        testCompile("org.springframework.boot:spring-boot-starter-test")
        testCompile("org.springframework.boot:spring-boot-test-autoconfigure")
        testCompile("io.rest-assured:rest-assured:3.0.6")
        testCompile("io.rest-assured:json-schema-validator:3.0.6")
        testCompile("io.rest-assured:spring-mock-mvc:3.0.6")
        testCompile("org.springframework.security:spring-security-test:4.2.3.RELEASE")
        testCompile("com.google.code.gson:gson:2.8.2")
        testCompile("org.assertj:assertj-core:3.8.0")
        testCompile("org.powermock:powermock-module-junit4:1.7.3")
        testCompile("org.powermock:powermock-api-mockito:1.7.3")

        testCompile 'com.tngtech.java:junit-dataprovider:1.13.1'
        testCompile "org.seleniumhq.selenium:htmlunit-driver:2.28.2"
        // Annoyingly the version of selenium needs to be specified, otherwise an 
        // old one which doesnt work (2.53.1) is pulled in
        testCompile 'org.seleniumhq.selenium:selenium-server:3.7.1'
        testCompile 'org.seleniumhq.selenium:selenium-java:3.7.1'
        testCompile 'org.seleniumhq.selenium:selenium-api:3.7.1'
        testCompile "org.seleniumhq.selenium:selenium-edge-driver:3.7.1"
        testCompile "org.seleniumhq.selenium:selenium-chrome-driver:3.7.1"
        testCompile "org.seleniumhq.selenium:selenium-firefox-driver:3.7.1"
        testCompile "org.seleniumhq.selenium:selenium-ie-driver:3.7.1"
        testCompile "org.seleniumhq.selenium:selenium-opera-driver:3.7.1"
        testCompile "org.seleniumhq.selenium:selenium-safari-driver:3.7.1"
        testCompile "org.seleniumhq.selenium:selenium-support:3.7.1"
        testCompile "org.seleniumhq.selenium:selenium-remote-driver:3.7.1"

        testCompile 'net.serenity-bdd:serenity-core:1.8.21'
        testCompile 'net.serenity-bdd:serenity-junit:1.8.21'
        testCompile 'net.serenity-bdd:serenity-spring:1.8.21'
        testCompile 'net.serenity-bdd:serenity-cucumber:1.6.10'

        testCompileOnly 'org.projectlombok:lombok:1.16.18'

        testRuntime files("${rootDir}/elite2-api-impl/src/main/configs")
        testRuntime files("${rootDir}/elite2-api-impl/src/main/resources")
    }

    gradle.startParameter.continueOnFailure = true

    sourceSets {
        main {
            java {
                srcDirs = ['src/main/java']
            }
            resources {
                srcDirs = ['src/main/configs', 'src/main/resources']
            }
        }
    }

    task testIntegration(type:Test) {
        minHeapSize = "2G"
        maxHeapSize = "2G"
        include "**/*IntTest*"
    }

    task testWithSchemaNomis(type:Test) {
    // Limit the JVM, otherwise on CircleCi if the memory used gets too close to the 4G container
    // maximum the test process is somewhat viciously killed and exits with code 137
        minHeapSize = "2G"
        maxHeapSize = "2G"
        def nomisEnvVars = ['api.db.target':'nomis',
                            'cucumber.options':"--tags '(@global or @nomis) and not (@elite or @wip or @broken)'"]

        exclude "**/persistence/*"
        exclude "**/*IntTest*"
        environment nomisEnvVars
    }

    task testWithSchemaNomisOracle(type:Test) {
        minHeapSize = "2G"
        maxHeapSize = "2G"
        def nomisEnvVars = ['api.db.target':'nomis', 'api.db.dialect':'oracle',
                            'cucumber.options':"--tags '(@global or @nomis or @oracle) and not (@elite or @wip or @broken)'"]

        exclude "**/persistence/*"
        exclude "**/*IntTest*"
        environment nomisEnvVars
    }

    task testWithSchemaElite(type:Test) {
        minHeapSize = "2G"
        maxHeapSize = "2G"
        def eliteEnvVars = ['api.db.target':'elite',
                            'cucumber.options':"--tags '(@global or @elite) and not (@nomis or @wip or @broken)'"]

        exclude "**/persistence/*"
        exclude "**/*IntTest*"
        environment eliteEnvVars
    }

    jacocoTestReport.dependsOn test

    // TODO: Enable checkstyle once rules reviewed and agreed (but don't enable for tests).
    checkstyleMain.enabled = false
    checkstyleTest.enabled = false

    // Exclude Serenity BDD integration and IntTest tests from 'test' task so they can be controlled independently
    test {
        exclude "**/executablespecification/*", "**/*IntTest*"
    }

    test.dependsOn testIntegration, testWithSchemaElite, testWithSchemaNomis

    jacocoTestReport.executionData ([
      file("${rootDir}/elite2-api-impl/build/jacoco/test.exec"),
      file("${rootDir}/elite2-api-impl/build/jacoco/testIntegration.exec"),
      file("${rootDir}/elite2-api-impl/build/jacoco/testWithSchemaElite.exec"),
      file("${rootDir}/elite2-api-impl/build/jacoco/testWithSchemaNomis.exec")
    ])

    jacocoTestReport {
        reports {
            xml.enabled true
            csv.enabled false
        }
    }

    def codacyArgs = ['--language', 'Java',
                      '--coverageReport', 'build/reports/jacoco/test/jacocoTestReport.xml',
                      // Token is available from the Codacy website when logged in (see Settings -> Integrations -> Project API)
                      '--projectToken', 'f5dec866390441da991b64ab941c2061']

    task codacyCoverageUploader(type:JavaExec) {
        doFirst {
            println "Sending coverage data to Codacy ..."

            main = 'com.codacy.CodacyCoverageReporter'
            // This jar was downloaded from the Codacy website:
            classpath = files('codacy-coverage-reporter-2.0.1-assembly.jar')
            args codacyArgs
        }
    }

    codacyCoverageUploader.dependsOn jacocoTestReport
    aggregate.dependsOn codacyCoverageUploader
    compileJava.dependsOn processResources

    def configsDir = file("${rootDir}/elite2-api-impl/src/main/configs").absolutePath

    processResources {
        def devConfigsFile = file("${configsDir}/application-dev.yml")
        def configFile = file("${rootDir}/elite2-api-impl/src/main/resources/application.properties").absoluteFile

        String configContent = configFile.getText('UTF-8')
        configFile.write(configContent, 'UTF-8')
    }

    def applicationMainClass = 'net.syscon.elite.MobileApiServer'
    def dateFormat = new java.text.SimpleDateFormat("yyyy-MM-dd HH:mm:ss")
    def dateOnlyFormat = new java.text.SimpleDateFormat("yyyy-MM-dd")
    def today = dateOnlyFormat.format(new Date());
    version = today

    bootRepackage {
        mainClass = applicationMainClass
    }

    springBoot {
        mainClass = applicationMainClass

        buildInfo {
            // Generate extra build info.
            additionalProperties = [
                    by                   : System.properties['user.name'],
                    operatingSystem      : "${System.properties['os.name']} (${System.properties['os.version']})",
                    continuousIntegration: System.getenv('CI') ? true : false,
                    machine              : InetAddress.localHost.hostName,
                    time                 : dateFormat.format(new Date()),
                    name                 : 'elite2-api',
                    version              : System.getenv('CI') ? "${version}.${System.getenv('CIRCLE_BUILD_NUM')}" : version
            ]
        }
        executable = true
    }

    bootRun {
        systemProperties System.properties
        addResources = true
    }
}
